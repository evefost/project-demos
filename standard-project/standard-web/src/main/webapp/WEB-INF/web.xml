<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    <display-name>Archetype Created Web Application</display-name>
    <!-- 在Spring框架中是如何解决从页面传来的字符串的编码问题的呢？
     下面我们来看看Spring框架给我们提供过滤器CharacterEncodingFilter
      这个过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。
       其中encoding用来设置编码格式，forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式。-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--
    在spring mvc中， 在applicationContext.xml 和 dispatch-servlet.xml中都可以进行spring 的配置
    	Spring lets you define multiple contexts in a parent-child hierarchy.
	The applicationContext.xml defines the beans for the "root webapp context",
	i.e. the context associated with the webapp.
	The spring-servlet.xml (or whatever else you call it) defines the beans for one servlet's app context.
	There can be many of these in a webapp, one per Spring servlet (e.g. spring1-servlet.xml for servlet spring1,
	 spring2-servlet.xml for servlet spring2).
	Beans in spring-servlet.xml can reference beans in applicationContext.xml, but not vice versa.
	All Spring MVC controllers must go in the spring-servlet.xml context.
	In most simple cases, the applicationContext.xml context is unnecessary.
	It is generally used to contain beans that are shared between all servlets in a webapp.
	If you only have one servlet, then there's not really much point, unless you have a specific use for it.
	可见， applicationContext.xml 和 dispatch-servlet.xml形成了两个父子关系的上下文
	注意：========
	1） 一个bean如果在两个文件中都被定义了(比如两个文件中都定义了component scan扫描相同的package)，
	spring会在application context和 servlet context中都生成一个实例，他们处于不同的上下文空间中，
	他们的行为方式是有可能不一样的（见下面描述的问题）。
    2)  如果在application context和 servlet context中都存在同一个 @Service 的实例，
    controller（在servlet context中） 通过 @Resource引用时， 会优先选择servlet context中的实例。
    -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:applicationContext.xml</param-value>
    </context-param>
    <!--  -->
    <servlet>
        <servlet-name>DispatcherServlet
        </servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-servlet.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup><!--是启动顺序，让这个Servlet随Servletp容器一起启动。-->
    </servlet>
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern> <!--会拦截URL中带“/”的请求。-->
    </servlet-mapping>

    <!--如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。-->
    <!--方案一：激活Tomcat的defaultServlet来处理静态文件-->
    <!--要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，这样请求就不会进入Spring了，我想性能是最好的吧。-->

    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath*:log4j2.xml</param-value>
    </context-param>


    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.swf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.gif</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.xml</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.map</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.proto</url-pattern>
    </servlet-mapping>


    <welcome-file-list><!--指定欢迎页面-->
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>
    <error-page> <!--当系统出现404错误，跳转到页面nopage.html-->
        <error-code>404</error-code>
        <location>/nopage.jsp</location>
    </error-page>
    <error-page> <!--当系统出现java.lang.NullPointerException，跳转到页面error.html-->
        <exception-type>java.lang.NullPointerException</exception-type>
        <location>/erropage.jsp</location>
    </error-page>
    <session-config><!--会话超时配置，单位分钟-->
        <session-timeout>360</session-timeout>
    </session-config>
</web-app>

